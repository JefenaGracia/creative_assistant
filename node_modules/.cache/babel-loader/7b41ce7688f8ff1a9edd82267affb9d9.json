{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js\";\nimport React, { useState } from 'react';\nimport { db } from '../firebaseConfig'; // Assuming Firebase has been configured in firebaseConfig\nimport { doc, setDoc, batch } from 'firebase/firestore'; // Import only necessary Firestore methods\nimport * as XLSX from 'xlsx'; // Updated import statement\nimport Papa from 'papaparse';\nconst TeacherDashboard = () => {\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleFileChange = e => {\n    const uploadedFile = e.target.files[0];\n    setFile(uploadedFile);\n  };\n  const handleFileUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file to upload.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const reader = new FileReader();\n      reader.onload = async e => {\n        const fileContent = e.target.result;\n        let data;\n        if (file.name.endsWith(\".xlsx\")) {\n          const workbook = XLSX.read(fileContent, {\n            type: 'binary'\n          });\n          const sheetName = workbook.SheetNames[0];\n          const sheet = workbook.Sheets[sheetName];\n          data = XLSX.utils.sheet_to_json(sheet);\n        } else if (file.name.endsWith(\".csv\")) {\n          data = Papa.parse(fileContent, {\n            header: true,\n            skipEmptyLines: true\n          }).data;\n        }\n        if (data) {\n          // For each record, update Firestore with assignment and student details\n          const batch = db.batch();\n          data.forEach(item => {\n            const studentRef = doc(db, 'users', item.email);\n            const assignmentRef = doc(db, 'assignments', item.email);\n            const userData = {\n              email: item.email,\n              role: 'student' // Assuming role is student\n            };\n            const assignmentData = {\n              project: item.projectTeam,\n              assigned: true\n            };\n\n            // Add user to the Firestore 'users' collection\n            batch.set(studentRef, userData);\n\n            // Add assignment to the Firestore 'assignments' collection\n            batch.set(assignmentRef, assignmentData);\n          });\n\n          // Commit the batch update\n          await batch.commit();\n          alert(\"File uploaded and data saved successfully.\");\n        } else {\n          setError(\"Invalid file format.\");\n        }\n      };\n      reader.readAsBinaryString(file);\n    } catch (err) {\n      console.error(\"Error uploading file: \", err);\n      setError(\"Error uploading file. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Upload Project Teams (CSV/Excel)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleFileUpload,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, loading ? 'Uploading...' : 'Upload File'), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, error));\n};\nexport default TeacherDashboard;","map":{"version":3,"names":["React","useState","db","doc","setDoc","batch","XLSX","Papa","TeacherDashboard","file","setFile","loading","setLoading","error","setError","handleFileChange","e","uploadedFile","target","files","handleFileUpload","reader","FileReader","onload","fileContent","result","data","name","endsWith","workbook","read","type","sheetName","SheetNames","sheet","Sheets","utils","sheet_to_json","parse","header","skipEmptyLines","forEach","item","studentRef","email","assignmentRef","userData","role","assignmentData","project","projectTeam","assigned","set","commit","alert","readAsBinaryString","err","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","disabled","className"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { db } from '../firebaseConfig'; // Assuming Firebase has been configured in firebaseConfig\nimport { doc, setDoc, batch } from 'firebase/firestore'; // Import only necessary Firestore methods\nimport * as XLSX from 'xlsx'; // Updated import statement\nimport Papa from 'papaparse';\n\nconst TeacherDashboard = () => {\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleFileChange = (e) => {\n    const uploadedFile = e.target.files[0];\n    setFile(uploadedFile);\n  };\n\n  const handleFileUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file to upload.\");\n      return;\n    }\n    setLoading(true);\n\n    try {\n      const reader = new FileReader();\n      reader.onload = async (e) => {\n        const fileContent = e.target.result;\n\n        let data;\n        if (file.name.endsWith(\".xlsx\")) {\n          const workbook = XLSX.read(fileContent, { type: 'binary' });\n          const sheetName = workbook.SheetNames[0];\n          const sheet = workbook.Sheets[sheetName];\n          data = XLSX.utils.sheet_to_json(sheet);\n        } else if (file.name.endsWith(\".csv\")) {\n          data = Papa.parse(fileContent, { header: true, skipEmptyLines: true }).data;\n        }\n\n        if (data) {\n          // For each record, update Firestore with assignment and student details\n          const batch = db.batch();\n          data.forEach((item) => {\n            const studentRef = doc(db, 'users', item.email);\n            const assignmentRef = doc(db, 'assignments', item.email);\n\n            const userData = {\n              email: item.email,\n              role: 'student', // Assuming role is student\n            };\n\n            const assignmentData = {\n              project: item.projectTeam,\n              assigned: true,\n            };\n\n            // Add user to the Firestore 'users' collection\n            batch.set(studentRef, userData);\n\n            // Add assignment to the Firestore 'assignments' collection\n            batch.set(assignmentRef, assignmentData);\n          });\n\n          // Commit the batch update\n          await batch.commit();\n          alert(\"File uploaded and data saved successfully.\");\n        } else {\n          setError(\"Invalid file format.\");\n        }\n      };\n\n      reader.readAsBinaryString(file);\n    } catch (err) {\n      console.error(\"Error uploading file: \", err);\n      setError(\"Error uploading file. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload Project Teams (CSV/Excel)</h2>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleFileUpload} disabled={loading}>\n        {loading ? 'Uploading...' : 'Upload File'}\n      </button>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n};\n\nexport default TeacherDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}