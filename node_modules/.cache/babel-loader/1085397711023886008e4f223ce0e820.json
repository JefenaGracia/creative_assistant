{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/Projects.js\";\n// Projects.js\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../firebaseConfig';\nimport { collection, doc, setDoc, getDocs } from 'firebase/firestore';\nimport * as XLSX from 'xlsx';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './Projects.css';\nconst Projects = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [file, setFile] = useState(null);\n  const {\n    classroomId\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const projectsCollection = collection(db, 'classrooms', classroomId, 'projects');\n        const querySnapshot = await getDocs(projectsCollection);\n        setProjects(querySnapshot.docs.map(doc => doc.data()));\n        setLoading(false);\n      } catch (err) {\n        setError('Error fetching projects');\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, [classroomId]);\n  const handleFileUpload = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleProjectUpload = async () => {\n    if (!file) {\n      setError('Please upload a valid Excel file.');\n      return;\n    }\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.csv')) {\n      setError('Please upload an Excel (.xlsx) or CSV file.');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, {\n          type: 'binary'\n        });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n        const classroomRef = doc(db, 'classrooms', classroomId);\n\n        // Reset projects list before adding new projects\n        setProjects([]);\n        for (const row of jsonData) {\n          const {\n            'Project Name': projectName,\n            'Team Members': teamMembers\n          } = row;\n          if (projectName && teamMembers) {\n            const projectRef = doc(collection(classroomRef, 'projects'), projectName);\n            await setDoc(projectRef, {\n              projectName,\n              teamMembers: teamMembers.split(',').map(member => member.trim()) // Split by commas if multiple members\n            });\n          }\n        }\n\n        // Refresh projects list after upload\n        const projectsCollection = collection(db, 'classrooms', classroomId, 'projects');\n        const querySnapshot = await getDocs(projectsCollection);\n        setProjects(querySnapshot.docs.map(doc => doc.data()));\n        setLoading(false);\n      } catch (err) {\n        console.error('Error uploading projects:', err);\n        setError('An error occurred while processing the file.');\n        setLoading(false);\n      }\n    };\n    reader.readAsBinaryString(file);\n  };\n  const handleProjectClick = projectName => {\n    navigate(`/classroom/${classroomId}/projects/${projectName}`);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"projects\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Manage Projects\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx,.csv\",\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleProjectUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Upload Project Data\"), loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }\n  }, \"Loading...\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"projects-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, projects.length > 0 ? projects.map(project => /*#__PURE__*/React.createElement(\"button\", {\n    key: project.projectName,\n    onClick: () => handleProjectClick(project.projectName),\n    className: \"project-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, project.projectName)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"No projects available yet.\")));\n};\nexport default Projects;","map":{"version":3,"names":["React","useState","useEffect","db","collection","doc","setDoc","getDocs","XLSX","useParams","useNavigate","Projects","projects","setProjects","loading","setLoading","error","setError","file","setFile","classroomId","navigate","fetchProjects","projectsCollection","querySnapshot","docs","map","data","err","handleFileUpload","e","target","files","handleProjectUpload","name","endsWith","reader","FileReader","onload","event","fileData","result","workbook","read","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","classroomRef","row","projectName","teamMembers","projectRef","split","member","trim","console","readAsBinaryString","handleProjectClick","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","length","project","key"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/Projects.js"],"sourcesContent":["// Projects.js\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../firebaseConfig';\nimport { collection, doc, setDoc, getDocs } from 'firebase/firestore';\nimport * as XLSX from 'xlsx';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './Projects.css';\n\nconst Projects = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [file, setFile] = useState(null);\n  const { classroomId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const projectsCollection = collection(db, 'classrooms', classroomId, 'projects');\n        const querySnapshot = await getDocs(projectsCollection);\n        setProjects(querySnapshot.docs.map(doc => doc.data()));\n        setLoading(false);\n      } catch (err) {\n        setError('Error fetching projects');\n        setLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, [classroomId]);\n\n  const handleFileUpload = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleProjectUpload = async () => {\n    if (!file) {\n      setError('Please upload a valid Excel file.');\n      return;\n    }\n\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.csv')) {\n      setError('Please upload an Excel (.xlsx) or CSV file.');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, { type: 'binary' });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        const classroomRef = doc(db, 'classrooms', classroomId);\n\n        // Reset projects list before adding new projects\n        setProjects([]);\n\n        for (const row of jsonData) {\n          const { 'Project Name': projectName, 'Team Members': teamMembers } = row;\n\n          if (projectName && teamMembers) {\n            const projectRef = doc(collection(classroomRef, 'projects'), projectName);\n            await setDoc(projectRef, {\n              projectName,\n              teamMembers: teamMembers.split(',').map(member => member.trim()), // Split by commas if multiple members\n            });\n          }\n        }\n\n        // Refresh projects list after upload\n        const projectsCollection = collection(db, 'classrooms', classroomId, 'projects');\n        const querySnapshot = await getDocs(projectsCollection);\n        setProjects(querySnapshot.docs.map(doc => doc.data()));\n\n        setLoading(false);\n      } catch (err) {\n        console.error('Error uploading projects:', err);\n        setError('An error occurred while processing the file.');\n        setLoading(false);\n      }\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  const handleProjectClick = (projectName) => {\n    navigate(`/classroom/${classroomId}/projects/${projectName}`);\n  };\n\n  return (\n    <div className=\"projects\">\n      <h2>Manage Projects</h2>\n      <input type=\"file\" accept=\".xlsx,.csv\" onChange={handleFileUpload} />\n      <button onClick={handleProjectUpload}>Upload Project Data</button>\n\n      {loading && <p>Loading...</p>}\n      {error && <p className=\"error\">{error}</p>}\n\n      <div className=\"projects-list\">\n        {projects.length > 0 ? (\n          projects.map((project) => (\n            <button\n              key={project.projectName}\n              onClick={() => handleProjectClick(project.projectName)}\n              className=\"project-button\"\n            >\n              {project.projectName}\n            </button>\n          ))\n        ) : (\n          <p>No projects available yet.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}