{"ast":null,"code":"import { getFirestore, collection, getDocs, query, where } from \"firebase/firestore\";\nimport { db } from './firebaseConfig';\nconst checkUserInFirestore = async email => {\n  const usersCollection = collection(db, \"users\");\n  const q = query(usersCollection, where(\"email\", \"==\", email));\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) {\n    console.log(\"No matching user found\");\n  } else {\n    querySnapshot.forEach(doc => {\n      console.log(doc.id, \" => \", doc.data());\n    });\n  }\n};\nconst handleGoogleLogin = () => {\n  setLoading(true);\n  const authInstance = gapi.auth2.getAuthInstance();\n  if (!authInstance) {\n    console.error('Google Auth instance is not initialized');\n    setLoading(false);\n    return;\n  }\n  authInstance.signIn().then(async googleUser => {\n    setLoading(false);\n    const profile = googleUser.getBasicProfile();\n    const email = profile.getEmail();\n    console.log(\"Logged in as:\", email);\n\n    // Call the function here to check Firestore for the email\n    checkUserInFirestore(email);\n    const userRef = doc(db, \"users\", email);\n    const docSnap = await getDoc(userRef);\n    if (docSnap.exists()) {\n      const userData = docSnap.data();\n      console.log(\"User role:\", userData.role);\n      setRole(userData.role);\n      setIsLoggedIn(true);\n    } else {\n      console.log(\"Email not found in Firestore\");\n      setRole(null);\n      alert('Email is not registered. Please contact the admin.');\n    }\n  }).catch(error => {\n    setLoading(false);\n    setError('Login failed, please try again.');\n    console.error('Google login failed', error);\n  });\n};","map":{"version":3,"names":["getFirestore","collection","getDocs","query","where","db","checkUserInFirestore","email","usersCollection","q","querySnapshot","empty","console","log","forEach","doc","id","data","handleGoogleLogin","setLoading","authInstance","gapi","auth2","getAuthInstance","error","signIn","then","googleUser","profile","getBasicProfile","getEmail","userRef","docSnap","getDoc","exists","userData","role","setRole","setIsLoggedIn","alert","catch","setError"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/App.js"],"sourcesContent":["import { getFirestore, collection, getDocs, query, where } from \"firebase/firestore\";\nimport { db } from './firebaseConfig'; \n\nconst checkUserInFirestore = async (email) => {\n  const usersCollection = collection(db, \"users\");\n  const q = query(usersCollection, where(\"email\", \"==\", email));\n  const querySnapshot = await getDocs(q);\n\n  if (querySnapshot.empty) {\n    console.log(\"No matching user found\");\n  } else {\n    querySnapshot.forEach((doc) => {\n      console.log(doc.id, \" => \", doc.data());\n    });\n  }\n};\n\nconst handleGoogleLogin = () => {\n  setLoading(true);\n  const authInstance = gapi.auth2.getAuthInstance();\n  if (!authInstance) {\n    console.error('Google Auth instance is not initialized');\n    setLoading(false);\n    return;\n  }\n\n  authInstance.signIn()\n    .then(async (googleUser) => {\n      setLoading(false);\n      const profile = googleUser.getBasicProfile();\n      const email = profile.getEmail();\n      console.log(\"Logged in as:\", email);\n\n      // Call the function here to check Firestore for the email\n      checkUserInFirestore(email);\n\n      const userRef = doc(db, \"users\", email);\n      const docSnap = await getDoc(userRef);\n\n      if (docSnap.exists()) {\n        const userData = docSnap.data();\n        console.log(\"User role:\", userData.role);\n        setRole(userData.role);\n        setIsLoggedIn(true);\n      } else {\n        console.log(\"Email not found in Firestore\");\n        setRole(null);\n        alert('Email is not registered. Please contact the admin.');\n      }\n    })\n    .catch((error) => {\n      setLoading(false);\n      setError('Login failed, please try again.');\n      console.error('Google login failed', error);\n    });\n};\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACpF,SAASC,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,oBAAoB,GAAG,MAAOC,KAAK,IAAK;EAC5C,MAAMC,eAAe,GAAGP,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC;EAC/C,MAAMI,CAAC,GAAGN,KAAK,CAACK,eAAe,EAAEJ,KAAK,CAAC,OAAO,EAAE,IAAI,EAAEG,KAAK,CAAC,CAAC;EAC7D,MAAMG,aAAa,GAAG,MAAMR,OAAO,CAACO,CAAC,CAAC;EAEtC,IAAIC,aAAa,CAACC,KAAK,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,MAAM;IACLH,aAAa,CAACI,OAAO,CAAEC,GAAG,IAAK;MAC7BH,OAAO,CAACC,GAAG,CAACE,GAAG,CAACC,EAAE,EAAE,MAAM,EAAED,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9BC,UAAU,CAAC,IAAI,CAAC;EAChB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,eAAe,CAAC,CAAC;EACjD,IAAI,CAACH,YAAY,EAAE;IACjBR,OAAO,CAACY,KAAK,CAAC,yCAAyC,CAAC;IACxDL,UAAU,CAAC,KAAK,CAAC;IACjB;EACF;EAEAC,YAAY,CAACK,MAAM,CAAC,CAAC,CAClBC,IAAI,CAAC,MAAOC,UAAU,IAAK;IAC1BR,UAAU,CAAC,KAAK,CAAC;IACjB,MAAMS,OAAO,GAAGD,UAAU,CAACE,eAAe,CAAC,CAAC;IAC5C,MAAMtB,KAAK,GAAGqB,OAAO,CAACE,QAAQ,CAAC,CAAC;IAChClB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,KAAK,CAAC;;IAEnC;IACAD,oBAAoB,CAACC,KAAK,CAAC;IAE3B,MAAMwB,OAAO,GAAGhB,GAAG,CAACV,EAAE,EAAE,OAAO,EAAEE,KAAK,CAAC;IACvC,MAAMyB,OAAO,GAAG,MAAMC,MAAM,CAACF,OAAO,CAAC;IAErC,IAAIC,OAAO,CAACE,MAAM,CAAC,CAAC,EAAE;MACpB,MAAMC,QAAQ,GAAGH,OAAO,CAACf,IAAI,CAAC,CAAC;MAC/BL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEsB,QAAQ,CAACC,IAAI,CAAC;MACxCC,OAAO,CAACF,QAAQ,CAACC,IAAI,CAAC;MACtBE,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL1B,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CwB,OAAO,CAAC,IAAI,CAAC;MACbE,KAAK,CAAC,oDAAoD,CAAC;IAC7D;EACF,CAAC,CAAC,CACDC,KAAK,CAAEhB,KAAK,IAAK;IAChBL,UAAU,CAAC,KAAK,CAAC;IACjBsB,QAAQ,CAAC,iCAAiC,CAAC;IAC3C7B,OAAO,CAACY,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}