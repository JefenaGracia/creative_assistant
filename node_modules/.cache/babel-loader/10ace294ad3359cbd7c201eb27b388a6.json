{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/ManageClassroom.js\";\n// ManageClassroom.js\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../firebaseConfig';\nimport { collection, doc, getDocs, setDoc, deleteDoc } from 'firebase/firestore';\nimport * as XLSX from 'xlsx';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './ManageClassroom.css';\nconst ManageClassroom = () => {\n  const [students, setStudents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [classID, setClassID] = useState('');\n  const {\n    classroomId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Fetching the list of students from the classroom\n  useEffect(() => {\n    const fetchClassroomStudents = async () => {\n      try {\n        const classroomRef = doc(db, 'classrooms', classroomId);\n        const studentsCollection = collection(classroomRef, 'students');\n        const querySnapshot = await getDocs(studentsCollection);\n        setStudents(querySnapshot.docs.map(doc => doc.data()));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching students:', error);\n        setLoading(false);\n      }\n    };\n    fetchClassroomStudents();\n  }, [classroomId]);\n\n  // Handle removing a student from the classroom\n  const handleStudentRemove = async email => {\n    try {\n      const classroomRef = doc(db, 'classrooms', classroomId);\n      const studentRef = doc(classroomRef, 'students', email);\n      await deleteDoc(studentRef);\n      setStudents(students.filter(student => student.email !== email));\n    } catch (error) {\n      console.error('Error removing student:', error);\n    }\n  };\n\n  // Handle file upload to add students\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, {\n          type: 'array'\n        }); // Use 'array' instead of 'binary'\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Process each student and add to Firestore\n        const classroomRef = doc(db, 'classrooms', classroomId);\n        const newStudents = [];\n        for (const row of jsonData) {\n          const {\n            'Student Email': email,\n            'First name': firstName,\n            'Last name': lastName\n          } = row;\n          if (email && firstName && lastName) {\n            const studentRef = doc(collection(classroomRef, 'students'), email);\n            await setDoc(studentRef, {\n              email,\n              firstName,\n              lastName\n            });\n            newStudents.push({\n              email,\n              firstName,\n              lastName\n            });\n          }\n        }\n\n        // Update the student list in the state\n        setStudents(prevStudents => [...prevStudents, ...newStudents]);\n      } catch (error) {\n        console.error('Error reading file:', error);\n      }\n    };\n    reader.readAsArrayBuffer(file); // Use readAsArrayBuffer\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }\n  }, \"Loading students...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"manage-classroom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Manage Students\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx,.csv\",\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"student-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, students.length > 0 ? students.map(student => /*#__PURE__*/React.createElement(\"div\", {\n    key: student.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, student.lastName, \", \", student.firstName), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleStudentRemove(student.email),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"Remove\"))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"No students in this classroom yet.\")));\n};\nexport default ManageClassroom;","map":{"version":3,"names":["React","useState","useEffect","db","collection","doc","getDocs","setDoc","deleteDoc","XLSX","useNavigate","useParams","ManageClassroom","students","setStudents","loading","setLoading","classID","setClassID","classroomId","navigate","fetchClassroomStudents","classroomRef","studentsCollection","querySnapshot","docs","map","data","error","console","handleStudentRemove","email","studentRef","filter","student","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","fileData","result","workbook","read","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","newStudents","row","firstName","lastName","push","prevStudents","readAsArrayBuffer","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","accept","onChange","length","key","onClick"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/ManageClassroom.js"],"sourcesContent":["// ManageClassroom.js\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../firebaseConfig';\nimport { collection, doc, getDocs, setDoc, deleteDoc } from 'firebase/firestore';\nimport * as XLSX from 'xlsx';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './ManageClassroom.css';\n\nconst ManageClassroom = () => {\n  const [students, setStudents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [classID, setClassID] = useState('');\n  const { classroomId } = useParams();\n  const navigate = useNavigate();\n\n  // Fetching the list of students from the classroom\n  useEffect(() => {\n    const fetchClassroomStudents = async () => {\n      try {\n        const classroomRef = doc(db, 'classrooms', classroomId);\n        const studentsCollection = collection(classroomRef, 'students');\n        const querySnapshot = await getDocs(studentsCollection);\n        setStudents(querySnapshot.docs.map(doc => doc.data()));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching students:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchClassroomStudents();\n  }, [classroomId]);\n\n  // Handle removing a student from the classroom\n  const handleStudentRemove = async (email) => {\n    try {\n      const classroomRef = doc(db, 'classrooms', classroomId);\n      const studentRef = doc(classroomRef, 'students', email);\n      await deleteDoc(studentRef);\n      setStudents(students.filter(student => student.email !== email));\n    } catch (error) {\n      console.error('Error removing student:', error);\n    }\n  };\n\n  // Handle file upload to add students\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, { type: 'array' }); // Use 'array' instead of 'binary'\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Process each student and add to Firestore\n        const classroomRef = doc(db, 'classrooms', classroomId);\n        const newStudents = [];\n        \n        for (const row of jsonData) {\n          const { 'Student Email': email, 'First name': firstName, 'Last name': lastName } = row;\n\n          if (email && firstName && lastName) {\n            const studentRef = doc(collection(classroomRef, 'students'), email);\n            await setDoc(studentRef, { email, firstName, lastName });\n            newStudents.push({ email, firstName, lastName });\n          }\n        }\n\n        // Update the student list in the state\n        setStudents((prevStudents) => [...prevStudents, ...newStudents]);\n      } catch (error) {\n        console.error('Error reading file:', error);\n      }\n    };\n\n    reader.readAsArrayBuffer(file); // Use readAsArrayBuffer\n  };\n\n  if (loading) return <p>Loading students...</p>;\n\n  return (\n    <div className=\"manage-classroom\">\n      <h2>Manage Students</h2>\n      {/* File upload for adding students */}\n      <input type=\"file\" accept=\".xlsx,.csv\" onChange={handleFileUpload} />\n\n      {/* List of students */}\n      <div className=\"student-list\">\n        {students.length > 0 ? (\n          students.map((student) => (\n            <div key={student.email}>\n              <p>{student.lastName}, {student.firstName}</p>\n              <button onClick={() => handleStudentRemove(student.email)}>Remove</button>\n            </div>\n          ))\n        ) : (\n          <p>No students in this classroom yet.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ManageClassroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}