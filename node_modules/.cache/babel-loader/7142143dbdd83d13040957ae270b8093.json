{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { db } from '../firebaseConfig';\nimport { setDoc, doc, collection, getDoc } from 'firebase/firestore';\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [classroomName, setClassroomName] = useState('');\n\n  // Handle file upload for creating a classroom and assigning students\n  const handleClassroomFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n    if (!classroomName) {\n      alert(\"Please enter a classroom name\");\n      return;\n    }\n    setLoading(true);\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, {\n          type: 'binary'\n        });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Debug: Check loaded JSON data\n        console.log(\"Loaded JSON data:\", jsonData);\n\n        // Check if classroom exists, if not create a new one\n        const classroomRef = doc(db, 'classrooms', classroomName);\n        const classroomSnap = await getDoc(classroomRef);\n        if (!classroomSnap.exists()) {\n          await setDoc(classroomRef, {\n            classroomName,\n            courseID: classroomName.toUpperCase()\n          });\n          console.log(`Classroom ${classroomName} created.`);\n        }\n\n        // Process each row and check if the required fields exist\n        for (const row of jsonData) {\n          const {\n            'Student Email': email,\n            'First name ': firstName,\n            'Last name': lastName\n          } = row;\n\n          // Trim spaces from field names\n          const trimmedFirstName = firstName === null || firstName === void 0 ? void 0 : firstName.trim();\n          const trimmedLastName = lastName === null || lastName === void 0 ? void 0 : lastName.trim();\n\n          // Check if required fields are missing\n          if (!email || !trimmedFirstName || !trimmedLastName) {\n            console.log(\"Missing data in row:\", row); // Debug log to see what's missing\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Add student to Firestore\n          const studentRef = doc(collection(classroomRef, 'students'), email); // Use email as the doc ID\n          await setDoc(studentRef, {\n            email,\n            firstName: trimmedFirstName,\n            lastName: trimmedLastName,\n            assignedAt: new Date().toISOString() // Store the current timestamp\n          });\n          console.log(`Student ${trimmedFirstName} ${trimmedLastName} added to classroom ${classroomName}`);\n        }\n        alert('Classroom created and students added successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Teacher Dashboard\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Classroom Name:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: classroomName,\n    onChange: e => setClassroomName(e.target.value),\n    style: {\n      marginLeft: '10px',\n      padding: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx,.csv\",\n    onChange: handleClassroomFileUpload,\n    style: {\n      marginTop: '10px',\n      padding: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'blue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }, \"Uploading...\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, error));\n};\nexport default TeacherDashboard;","map":{"version":3,"names":["React","useState","XLSX","db","setDoc","doc","collection","getDoc","TeacherDashboard","loading","setLoading","error","setError","classroomName","setClassroomName","handleClassroomFileUpload","e","file","target","files","alert","reader","FileReader","onload","event","fileData","result","workbook","read","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","console","log","classroomRef","classroomSnap","exists","courseID","toUpperCase","row","email","firstName","lastName","trimmedFirstName","trim","trimmedLastName","studentRef","assignedAt","Date","toISOString","err","readAsBinaryString","createElement","style","padding","fontFamily","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","marginLeft","accept","marginTop","color"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { db } from '../firebaseConfig';\nimport { setDoc, doc, collection, getDoc } from 'firebase/firestore';\n\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [classroomName, setClassroomName] = useState('');\n\n  // Handle file upload for creating a classroom and assigning students\n  const handleClassroomFileUpload = (e) => {\n    const file = e.target.files[0];\n\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n\n    if (!classroomName) {\n      alert(\"Please enter a classroom name\");\n      return;\n    }\n\n    setLoading(true);\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, { type: 'binary' });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Debug: Check loaded JSON data\n        console.log(\"Loaded JSON data:\", jsonData);\n\n        // Check if classroom exists, if not create a new one\n        const classroomRef = doc(db, 'classrooms', classroomName);\n        const classroomSnap = await getDoc(classroomRef);\n\n        if (!classroomSnap.exists()) {\n          await setDoc(classroomRef, { classroomName, courseID: classroomName.toUpperCase() });\n          console.log(`Classroom ${classroomName} created.`);\n        }\n\n        // Process each row and check if the required fields exist\n        for (const row of jsonData) {\n          const { 'Student Email': email, 'First name ': firstName, 'Last name': lastName } = row;\n\n          // Trim spaces from field names\n          const trimmedFirstName = firstName?.trim();\n          const trimmedLastName = lastName?.trim();\n\n          // Check if required fields are missing\n          if (!email || !trimmedFirstName || !trimmedLastName) {\n            console.log(\"Missing data in row:\", row);  // Debug log to see what's missing\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Add student to Firestore\n          const studentRef = doc(collection(classroomRef, 'students'), email); // Use email as the doc ID\n          await setDoc(studentRef, {\n            email,\n            firstName: trimmedFirstName,\n            lastName: trimmedLastName,\n            assignedAt: new Date().toISOString(), // Store the current timestamp\n          });\n          console.log(`Student ${trimmedFirstName} ${trimmedLastName} added to classroom ${classroomName}`);\n        }\n\n        alert('Classroom created and students added successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Teacher Dashboard</h1>\n\n      {/* Classroom name input */}\n      <label>\n        Classroom Name:\n        <input \n          type=\"text\" \n          value={classroomName} \n          onChange={(e) => setClassroomName(e.target.value)} \n          style={{ marginLeft: '10px', padding: '5px' }}\n        />\n      </label>\n\n      {/* Upload file input */}\n      <input \n        type=\"file\" \n        accept=\".xlsx,.csv\" \n        onChange={handleClassroomFileUpload} \n        style={{ marginTop: '10px', padding: '5px' }} \n      />\n\n      {/* Loading/Error States */}\n      {loading && <p style={{ color: 'blue' }}>Uploading...</p>}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default TeacherDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}