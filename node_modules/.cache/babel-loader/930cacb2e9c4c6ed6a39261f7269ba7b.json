{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { db } from '../firebaseConfig';\nimport { setDoc, doc, collection, getDoc } from 'firebase/firestore';\nimport './TeacherDashboard.css'; // Importing external CSS for better styling\n\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [classroomName, setClassroomName] = useState('');\n\n  // Handle file upload for creating a classroom and assigning students\n  const handleClassroomFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n    if (!classroomName) {\n      alert(\"Please enter a classroom name\");\n      return;\n    }\n    setLoading(true);\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, {\n          type: 'binary'\n        });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Debug: Check loaded JSON data\n        console.log(\"Loaded JSON data:\", jsonData);\n\n        // Check if classroom exists, if not create a new one\n        const classroomRef = doc(db, 'classrooms', classroomName);\n        const classroomSnap = await getDoc(classroomRef);\n        if (!classroomSnap.exists()) {\n          await setDoc(classroomRef, {\n            classroomName,\n            courseID: classroomName.toUpperCase()\n          });\n          console.log(`Classroom ${classroomName} created.`);\n        }\n\n        // Process each row and check if the required fields exist\n        for (const row of jsonData) {\n          const trimmedRow = Object.keys(row).reduce((acc, key) => {\n            var _row$key;\n            acc[key.trim()] = (_row$key = row[key]) === null || _row$key === void 0 ? void 0 : _row$key.toString().trim();\n            return acc;\n          }, {});\n          const {\n            'Student Email': email,\n            'First name': firstName,\n            'Last name': lastName\n          } = trimmedRow;\n          if (!email || !firstName || !lastName) {\n            console.log(\"Missing data in row:\", trimmedRow);\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Add student to Firestore\n          const studentRef = doc(collection(classroomRef, 'students'), email);\n          await setDoc(studentRef, {\n            email,\n            firstName,\n            lastName,\n            assignedAt: new Date().toISOString()\n          });\n          console.log(`Student ${firstName} ${lastName} added to classroom ${classroomName}`);\n        }\n        alert('Classroom created and students added successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"teacher-dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Create Classroom and Assign Students\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"classroomName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Classroom Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"classroomName\",\n    type: \"text\",\n    value: classroomName,\n    onChange: e => setClassroomName(e.target.value),\n    placeholder: \"Enter Classroom Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"file-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Upload Student List\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"file-upload\",\n    type: \"file\",\n    accept: \".xlsx,.csv\",\n    onChange: handleClassroomFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), loading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"status loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }, \"Uploading...\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"status error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, error), !loading && !error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"status success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 30\n    }\n  }, \"Classroom created and students added successfully!\"));\n};\nexport default TeacherDashboard;","map":{"version":3,"names":["React","useState","XLSX","db","setDoc","doc","collection","getDoc","TeacherDashboard","loading","setLoading","error","setError","classroomName","setClassroomName","handleClassroomFileUpload","e","file","target","files","alert","reader","FileReader","onload","event","fileData","result","workbook","read","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","console","log","classroomRef","classroomSnap","exists","courseID","toUpperCase","row","trimmedRow","Object","keys","reduce","acc","key","_row$key","trim","toString","email","firstName","lastName","studentRef","assignedAt","Date","toISOString","err","readAsBinaryString","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","placeholder","accept"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { db } from '../firebaseConfig';\nimport { setDoc, doc, collection, getDoc } from 'firebase/firestore';\nimport './TeacherDashboard.css';  // Importing external CSS for better styling\n\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [classroomName, setClassroomName] = useState('');\n\n  // Handle file upload for creating a classroom and assigning students\n  const handleClassroomFileUpload = (e) => {\n    const file = e.target.files[0];\n\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n\n    if (!classroomName) {\n      alert(\"Please enter a classroom name\");\n      return;\n    }\n\n    setLoading(true);\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      try {\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, { type: 'binary' });\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Debug: Check loaded JSON data\n        console.log(\"Loaded JSON data:\", jsonData);\n\n        // Check if classroom exists, if not create a new one\n        const classroomRef = doc(db, 'classrooms', classroomName);\n        const classroomSnap = await getDoc(classroomRef);\n\n        if (!classroomSnap.exists()) {\n          await setDoc(classroomRef, { classroomName, courseID: classroomName.toUpperCase() });\n          console.log(`Classroom ${classroomName} created.`);\n        }\n\n        // Process each row and check if the required fields exist\n        for (const row of jsonData) {\n          const trimmedRow = Object.keys(row).reduce((acc, key) => {\n            acc[key.trim()] = row[key]?.toString().trim();\n            return acc;\n          }, {});\n\n          const { 'Student Email': email, 'First name': firstName, 'Last name': lastName } = trimmedRow;\n\n          if (!email || !firstName || !lastName) {\n            console.log(\"Missing data in row:\", trimmedRow);\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Add student to Firestore\n          const studentRef = doc(collection(classroomRef, 'students'), email);\n          await setDoc(studentRef, {\n            email,\n            firstName,\n            lastName,\n            assignedAt: new Date().toISOString(),\n          });\n          console.log(`Student ${firstName} ${lastName} added to classroom ${classroomName}`);\n        }\n\n        alert('Classroom created and students added successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div className=\"teacher-dashboard\">\n      <h1>Create Classroom and Assign Students</h1>\n\n      {/* Classroom name input */}\n      <div className=\"input-container\">\n        <label htmlFor=\"classroomName\">Classroom Name</label>\n        <input \n          id=\"classroomName\"\n          type=\"text\" \n          value={classroomName} \n          onChange={(e) => setClassroomName(e.target.value)} \n          placeholder=\"Enter Classroom Name\"\n        />\n      </div>\n\n      {/* File upload input */}\n      <div className=\"file-upload\">\n        <label htmlFor=\"file-upload\">Upload Student List</label>\n        <input \n          id=\"file-upload\"\n          type=\"file\" \n          accept=\".xlsx,.csv\" \n          onChange={handleClassroomFileUpload} \n        />\n      </div>\n\n      {/* Loading/Error States */}\n      {loading && <p className=\"status loading\">Uploading...</p>}\n      {error && <p className=\"status error\">{error}</p>}\n\n      {/* Success message */}\n      {!loading && !error && <p className=\"status success\">Classroom created and students added successfully!</p>}\n    </div>\n  );\n};\n\nexport default TeacherDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}