{"ast":null,"code":"var _jsxFileName = \"/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx'; // Correct import statement for XLSX\nimport { db } from '../firebaseConfig'; // Assuming Firebase is configured in firebaseConfig\nimport { getDoc, doc, setDoc, collection } from 'firebase/firestore';\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n    setLoading(true);\n    const reader = new FileReader();\n\n    // Handle file reading\n    reader.onload = async event => {\n      try {\n        // Read the contents of the file\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, {\n          type: 'binary'\n        });\n\n        // Assuming the data is in the first sheet\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Loop through the rows and process each row\n        for (const row of jsonData) {\n          const {\n            'Student Email': email,\n            'Project Name': projectName,\n            'Team Name': teamName\n          } = row;\n\n          // Check if the required columns are present\n          if (!email || !projectName || !teamName) {\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Check if the student exists in Firestore\n          const studentRef = doc(db, \"users\", email); // Assuming 'users' collection stores student data\n          const docSnap = await getDoc(studentRef);\n          if (docSnap.exists()) {\n            // If student exists, assign the project and team\n            const studentProjectsRef = collection(db, \"projects\"); // Adjust this collection based on your data structure\n\n            // Add or update the student's assignment\n            await setDoc(doc(studentProjectsRef, `${email}-${projectName}`), {\n              projectName,\n              teamName,\n              email,\n              assignedAt: new Date()\n            });\n          } else {\n            console.log(`Student with email ${email} not found`);\n          }\n        }\n        alert('File uploaded and students assigned successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Teacher Dashboard\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".xlsx,.csv\",\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }, \"Uploading...\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, error));\n};\nexport default TeacherDashboard;","map":{"version":3,"names":["React","useState","XLSX","db","getDoc","doc","setDoc","collection","TeacherDashboard","loading","setLoading","error","setError","handleFileUpload","e","file","target","files","alert","reader","FileReader","onload","event","fileData","result","workbook","read","type","sheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","row","email","projectName","teamName","studentRef","docSnap","exists","studentProjectsRef","assignedAt","Date","console","log","err","readAsBinaryString","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange"],"sources":["/Users/jefenaprakash/creative_assistant/ca_login/src/components/TeacherDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';  // Correct import statement for XLSX\nimport { db } from '../firebaseConfig'; // Assuming Firebase is configured in firebaseConfig\nimport { getDoc, doc, setDoc, collection } from 'firebase/firestore';\n\nconst TeacherDashboard = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Handle file upload\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n\n    if (!file) {\n      alert(\"No file selected\");\n      return;\n    }\n\n    setLoading(true);\n    const reader = new FileReader();\n    \n    // Handle file reading\n    reader.onload = async (event) => {\n      try {\n        // Read the contents of the file\n        const fileData = event.target.result;\n        const workbook = XLSX.read(fileData, { type: 'binary' });\n        \n        // Assuming the data is in the first sheet\n        const sheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n        // Loop through the rows and process each row\n        for (const row of jsonData) {\n          const { 'Student Email': email, 'Project Name': projectName, 'Team Name': teamName } = row;\n          \n          // Check if the required columns are present\n          if (!email || !projectName || !teamName) {\n            setError(\"Missing required fields in the file.\");\n            setLoading(false);\n            return;\n          }\n\n          // Check if the student exists in Firestore\n          const studentRef = doc(db, \"users\", email); // Assuming 'users' collection stores student data\n          const docSnap = await getDoc(studentRef);\n          \n          if (docSnap.exists()) {\n            // If student exists, assign the project and team\n            const studentProjectsRef = collection(db, \"projects\"); // Adjust this collection based on your data structure\n\n            // Add or update the student's assignment\n            await setDoc(doc(studentProjectsRef, `${email}-${projectName}`), {\n              projectName,\n              teamName,\n              email,\n              assignedAt: new Date()\n            });\n          } else {\n            console.log(`Student with email ${email} not found`);\n          }\n        }\n\n        alert('File uploaded and students assigned successfully.');\n        setLoading(false);\n      } catch (err) {\n        console.error(err);\n        setError(\"An error occurred while processing the file.\");\n        setLoading(false);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <h1>Teacher Dashboard</h1>\n      \n      {/* Upload file input */}\n      <input type=\"file\" accept=\".xlsx,.csv\" onChange={handleFileUpload} />\n      \n      {/* Loading/Error States */}\n      {loading && <p>Uploading...</p>}\n      {error && <p>{error}</p>}\n    </div>\n  );\n};\n\nexport default TeacherDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}